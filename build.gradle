buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.10'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'

sourceCompatibility = 1.8

dependencies {
    //testCompile group: 'junit', name: 'junit', version: '4.12'
}

intellij {
    version '2019.2.3'
    updateSinceUntilBuild false
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/gen'
        }
    }
}

String pluginVersion = '0.1.5'
String pluginIndex = 'ros-integrate'

patchPluginXml {
    version pluginVersion
    sinceBuild 192.5728
    pluginDescription """
        A plugin for IntelliJ based IDEs with the purpose of allowing easy use of the ROS framework.
    """
    changeNotes """
        <p>0.1.4</p>
        <ul>
            <li><b>The the root workspace directory may now be outside the project.</b>
                <ul>
                    <li>The workspace is automatically detected.</li>
                    <li>The workspace can be manually set from the ROS settings</li>
                </ul>
            </li>
            <li>Additional package paths outside the workspace can be specified
                <ul>
                    <li>By default, uses the path specified by \$ROS_PACKAGE_PATH</li>
                    <li>This value can be altered from the ROS Settings</li>
                    <li>IDE can also deal with complete windows paths</li>
                </ul>
            </li>
            <li><b>ROS Settings</b>
                <ul>
                    <li>ROS Root setting is now ROS Path, which should be the path to the directory
                        containing all ROS stuff (for example /opt/ros/kinetic)
                    </li>
                    <li>Workspace path can either be browsed or manually typed</li>
                    <li>Additional paths is displayed as a UNIX path list, which can be directly typed,
                        or altered as a list.
                    </li>
                    <li>The tool is smart and can deal with Windows paths as well as UNIX paths.</li>
                    <li>When using the list modification tab, items can directly typed, browsed, or duplicated</li>
                    <li>Additional paths field can also be reset to \$ROS_PACKAGE_PATH with a new reset button</li>
                    <li>Moved ROS Settings tab under Languages & Frameworks</li>
                </ul>
            </li>
            <li>The ROS library can be accessed in the Project structure window from the External Libraries tab</li>
            <li>String constants can now be explicitly searched via the "Search in String literals" option</li>
            <li>"New Message" dialog now prevent trying to create new messages in the ROS directory</li>
            <li>Cleaned package completion suggestions so that only packages that contain messages will be suggested.</li>
            <li>Added more words to the ROS dictionary</li>
            <li><b>Bug fixes</b>
                <ul>
                    <li>Fixed bug where packages would not get the correct icons</li>
                    <li>Field fragments can now be properly suppressed</li>
                    <li>Header inspection now inspects through fragments as well</li>
                    <li>Fixed bug where package indexing would reset for projects open for too long</li>
                    <li>Cloned git repositories (and any copied directories) are now properly examined for packages</li>
                    <li>field names are no longer unique to their files but instead to their "section" in the packet file,
                        which allows duplicate names in the file but not in the same section.
                    </li>
                    <li>the shortened version of headers is now valid if it is the first non-const field in its section</li>
                    <li>the automatic completion also respects the new rules of sections and const fields.</li>
                    <li>comments are now recognised after numerical constants</li>
                    <li>constants "." and "-." are now automatically categorised as string constants. 
                        Adding a number after them changes their interpretation to floating point numbers (with optional negation)
                    </li>
                    <li>Fixed some Log errors</li>
                    <li>Fixed one IDE freeze scenario. If your IDE still freezes please report it on the issue tracker.</li>
                </ul>
            </li>
        </ul>
        <p>0.1.3</p>
        <ul>
            <li><b>Added settings tab for ROS</b>. For now only includes settings for the ROS Root, but will be expanded in the future.</li>
            <li>The ROS Root may be changed to any directory, and is by default \$ROS_ROOT</li>
            <li>The settings are persistent and exist per project</li>
            <li><b>ROS Packages in the ROS root are now supported</b>:
                <ul>
                    <li>these packages have a unique icon</li>
                    <li>all functionality of the ROS packages applies to them.</li>
                    <li>these packages rely on the ROS Root configuration</li>
                </ul>
            </li>
            <li>deprecated builtin types are now properly displayed, though if you use them in your sources, the IDE will raise warnings (see inspections)</li>
            <li><b>ROS Inspections</b>
                <ul>
                    <li>added inspection that checks for deprecated types in message definition</li>
                    <li>added inspection that checks for types in the form of std_msgs/BUILTIN</li>
                    <li>added inspection that checks for redundant use of stamped messages in message definition</li>
                    <li>this inspection is configurable based on whether or not it is a list, array, or plain object</li>
                </ul>
            </li>
            <li><b>ROS Intentions</b>
                <ul>
                    <li>deprecated-type can be fixed by updating the type to its modern counterpart</li>
                    <li>avoid-std-msgs-builtin can be fixed by converting the type to its builtin counterpart</li>
                    <li>redundant-stamping can be fixed by using the unstamped variant of the given type</li>
                </ul>
            </li>
            <li>Fixed some bugs with inspection suppression in packet files</li>
            <li>fixed bug where ROS packages did not display the proper icon</li>
        </ul>
        <p>0.1.2</p>
        <ul>
            <li>added support for *.action files - equipped with all inspections for ROS packets and with its own file icon</li>
            <li>initial support for ROS Packages:
                <ul>
                    <li>introduced the concept of ROSPackage - the package containing all the files for a module in ROS!</li>
                    <li>packages also have their own icon</li>
                    <li>ROSPackages have their own qualified names, used to properly search for messages within packages</li>
                    <li>message autocompletion will add packages when selected. Additional package info will appear as well</li>
                    <li>autocompletion for ROS packages which will also trigger another message autocompletion query</li>
                    <li>autocompletion for messages now respects package names and will search within them</li>
                    <li>package prefixes within files can be used to refactor packages</li>
                    <li>renaming directories will also refactor files accordingly</li>
                </ul>
            </li>
            <li>moving message files will also change their references accordingly</li>
        </ul>
        <p>0.1.1</p>
        <ul>
            <li>renamed the ROSMsg language to ROSPkt - short for ROS Packet</li>
            <li>added support for *.srv files - equipped with all inspections for ROS messages and with its own file icon</li>
        </ul>
        <p>0.1</p>
        <ul>
            <li>Added the ROSMsg language - a language for ROS Messages</li>
            <li>ROSMsg has its own highlighting which can be customised</li>
            <li>*.msg has its own file icon (will be extended to *.srv in due time)</li>
            <li>ROSMsg contains a commenter (default: Ctrl+/ like all other commentators)</li>
            <li>Basic refactoring support for field names</li>
            <li>Refactoring support for msg types</li>
            <li>Jump-to-definition action by Ctrl clicking on the field type</li>
            <li>ROSMsg Autocompletion:
                <ul>
                    <li>non-numerical key-types: string, time, duration appear when writing a field type</li>
                    <li>Header std_msg type appears as well</li>
                    <li>numerical key-types: float, uint, int appear without their data size.<br/>
                        When selected, a data-size auto-completion list is shown and a default is auto-written
                    </li>
                    <li>IDE will search for other message types defined in-project, and will display them</li>
                    <li>when writing a field name, IDE will use its respective type to suggest a variety of possible names</li>
                    <li>Support for bracket completion</li>
                </ul>
            </li>
            <li>ROSMsg Annotation:
                <ul>
                    <li>added check for service separators, raises error if there are too many (1 or more)</li>
                    <li>added check for in-package custom field types,
                        raises errors if IDE could not find needed message file in project
                    </li>
                    <li>added check for custom-types, raises error if the message uses itself (recursion is not allowed!)</li>
                    <li>added another check for custom-types, raises error if they use illegal characters</li>
                    <li>added check for header fields, raises error if "Header" is found as a field type but not as the first one</li>
                    <li>added check for constants, raises error if it finds an array with a constant</li>
                    <li>added another check for constants, raises error if a custom-type, time, or duration have a constant</li>
                    <li>added yet another check for constants, raises error if the field type cannot handle the provided constant</li>
                    <li>added check for field names, raises error is a certain field name is used twice in a message</li>
                    <li>added another check for field names, raises error if the name uses illegal characters</li>
                    <li>added inspection which checks that field types are written in CamelCase</li>
                </ul>
            </li>
            <li>ROSMsg Intention and Fixes:
                <ul>
                    <li>message-is-not-defined can be fixed by adding a new message file. This intention has its own dialog</li>
                    <li>header-not-first-field can be fixed by adding a prefix to the type</li>
                    <li>type-cannot-handle-const and illegal-const-type can be fixed by changing the keytype accordingly</li>
                    <li>too-many-service-separators can be fixed by either removing that specific separator, or all of them if more than one are present</li>
                    <li>array-with-constant can be fixed by removing the array part</li>
                    <li>array-with-constant and illegal-const-type can be fixed by removing the constant</li>
                    <li>self-containing-message can be fixed by removing the field</li>
                    <li>duplicate-name and illegal-field-name can be fixed by renaming the field</li>
                    <li>illegal-field-type can be fixed by renaming the type</li>
                    <li>not-camel-field-type can be fixed by renaming the type</li>
                    <li>named fields and comments have a spellchecker running</li>
                </ul>
            </li>
        </ul>
    """

}

group pluginIndex
version pluginVersion