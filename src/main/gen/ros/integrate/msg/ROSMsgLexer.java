/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ros.integrate.msg;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ros.integrate.msg.psi.ROSMsgTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ROSMsg.flex</tt>
 */
class ROSMsgLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int END_TYPE = 2;
  public static final int IN_ARRAY = 4;
  public static final int END_ARRAY = 6;
  public static final int START_NAME = 8;
  public static final int END_NAME = 10;
  public static final int START_CONST = 12;
  public static final int END_LINE = 14;
  public static final int END_INT_TYPE = 16;
  public static final int IN_INT_ARRAY = 18;
  public static final int END_INT_ARRAY = 20;
  public static final int START_INT_NAME = 22;
  public static final int END_INT_NAME = 24;
  public static final int START_INT_CONST = 26;
  public static final int NEG_NUM = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\7\2\0\1\11\11\0\1\14\1\42\1\0\1\12\1\22\1"+
    "\25\1\24\1\26\1\12\1\23\1\12\1\21\1\12\3\0\1\6\35\0\1\10\1\0\1\13\3\0\1\32"+
    "\1\41\1\0\1\35\1\34\1\27\1\40\1\0\1\16\2\0\1\30\1\33\1\17\1\31\2\0\1\36\1"+
    "\37\1\20\1\15\17\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\2\2\1\1\1\2\1\3\1\4\10\1"+
    "\1\5\1\6\1\3\1\2\1\7\1\10\2\11\1\12"+
    "\1\13\2\14\2\15\1\16\1\17\1\20\1\21\2\22"+
    "\1\23\1\24\2\25\1\26\1\27\1\3\1\26\1\3"+
    "\7\1\2\0\1\26\2\0\1\26\1\30\6\1\1\31"+
    "\3\1\1\32\10\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u0230\0\u02bc\0\u02df\0\u0302"+
    "\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u0230"+
    "\0\u03f7\0\u03f7\0\u041a\0\u0230\0\u043d\0\u0460\0\u0483\0\u0230"+
    "\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u03f7\0\u0230\0\u0532\0\u0230"+
    "\0\u0555\0\u0578\0\u059b\0\u0230\0\u05be\0\u05e1\0\u0604\0\u0627"+
    "\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u0785\0\u03f7\0\u04a6\0\u064a\0\u0627\0\u07a8\0\u0690"+
    "\0\u020d\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u020d"+
    "\0\u089d\0\u08c0\0\u08e3\0\u020d\0\u0906\0\u0929\0\u094c\0\u096f"+
    "\0\u0992\0\u09b5\0\u09d8\0\u09fb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\20\1\21\1\22\2\23\1\20\1\24\1\25\1\26"+
    "\2\20\1\27\1\30\1\31\1\20\1\32\6\20\1\33"+
    "\5\20\1\34\1\20\1\35\1\20\1\36\1\20\1\25"+
    "\2\21\1\22\2\37\1\25\1\37\1\40\33\25\2\21"+
    "\1\22\1\41\1\42\1\25\1\41\2\25\1\43\1\44"+
    "\5\25\6\43\15\25\2\21\1\22\2\37\1\25\1\37"+
    "\33\25\2\45\1\21\1\22\2\46\1\25\1\41\33\45"+
    "\1\25\2\21\1\22\2\47\1\50\1\47\1\25\1\26"+
    "\31\25\2\51\1\21\1\52\2\53\1\51\1\54\33\51"+
    "\1\25\2\21\1\22\1\41\1\42\1\25\1\41\34\25"+
    "\2\21\1\22\2\55\1\25\1\55\1\56\33\25\2\21"+
    "\1\22\1\41\1\42\1\25\1\41\2\25\1\57\1\60"+
    "\5\25\6\57\15\25\2\21\1\22\2\55\1\25\1\55"+
    "\33\25\2\61\1\21\1\22\2\62\1\25\1\41\33\61"+
    "\1\25\2\21\1\22\2\63\1\64\1\63\1\25\1\26"+
    "\31\25\2\51\1\21\1\52\2\65\1\51\1\66\2\51"+
    "\1\67\1\51\1\70\4\51\6\67\13\51\1\71\1\25"+
    "\2\21\1\22\1\41\1\42\1\25\1\41\2\25\1\72"+
    "\6\25\6\72\13\25\1\73\2\20\2\0\3\20\2\0"+
    "\32\20\45\0\1\21\40\0\2\20\1\21\1\22\2\23"+
    "\1\20\1\24\1\0\32\20\1\0\2\21\1\22\2\24"+
    "\1\0\1\24\33\0\2\26\2\0\37\26\2\20\2\0"+
    "\3\20\2\0\3\20\1\74\30\20\2\0\3\20\2\0"+
    "\5\20\1\31\26\20\2\0\3\20\2\0\6\20\1\75"+
    "\25\20\2\0\3\20\2\0\5\20\1\76\26\20\2\0"+
    "\3\20\2\0\17\20\1\77\14\20\2\0\3\20\2\0"+
    "\4\20\1\100\27\20\2\0\3\20\2\0\7\20\1\101"+
    "\24\20\2\0\3\20\2\0\20\20\1\102\11\20\1\0"+
    "\2\21\1\22\1\103\1\42\1\0\1\103\45\0\1\43"+
    "\6\0\6\43\14\0\2\45\2\0\2\45\2\0\35\45"+
    "\1\21\1\22\2\46\1\0\1\103\33\45\1\0\2\21"+
    "\1\22\2\47\1\0\1\47\33\0\2\51\1\0\4\51"+
    "\1\104\35\51\1\21\4\51\1\104\35\51\1\21\1\52"+
    "\2\53\1\51\1\53\33\51\1\0\2\21\1\22\2\54"+
    "\1\0\1\54\45\0\1\57\6\0\6\57\14\0\2\61"+
    "\2\0\2\61\2\0\35\61\1\21\1\22\2\62\1\0"+
    "\1\103\33\61\1\0\2\21\1\22\2\63\1\0\1\63"+
    "\33\0\2\51\1\21\1\52\2\65\1\51\1\65\33\51"+
    "\1\0\2\21\1\22\2\66\1\0\1\66\33\0\2\51"+
    "\1\0\4\51\1\104\2\51\1\67\6\51\6\67\13\51"+
    "\1\105\2\51\1\0\4\51\1\104\2\51\1\106\6\51"+
    "\6\106\13\51\1\107\2\51\1\0\4\51\1\104\2\51"+
    "\1\105\6\51\6\105\14\51\12\0\1\72\6\0\6\72"+
    "\13\0\1\110\12\0\1\110\6\0\6\110\14\0\2\20"+
    "\2\0\3\20\2\0\3\20\1\111\30\20\2\0\3\20"+
    "\2\0\7\20\1\112\24\20\2\0\3\20\2\0\22\20"+
    "\1\113\11\20\2\0\3\20\2\0\20\20\1\114\13\20"+
    "\2\0\3\20\2\0\25\20\1\115\6\20\2\0\3\20"+
    "\2\0\25\20\1\116\6\20\2\0\3\20\2\0\20\20"+
    "\1\117\11\20\2\51\1\0\4\51\1\104\2\51\1\107"+
    "\6\51\6\107\14\51\2\20\2\0\3\20\2\0\10\20"+
    "\1\120\1\121\1\122\1\123\20\20\2\0\3\20\2\0"+
    "\23\20\1\124\10\20\2\0\3\20\2\0\21\20\1\125"+
    "\12\20\2\0\3\20\2\0\21\20\1\126\12\20\2\0"+
    "\3\20\2\0\5\20\1\127\26\20\2\0\3\20\2\0"+
    "\17\20\1\120\14\20\2\0\3\20\2\0\12\20\1\120"+
    "\21\20\2\0\3\20\2\0\15\20\1\120\16\20\2\0"+
    "\3\20\2\0\14\20\1\120\17\20\2\0\3\20\2\0"+
    "\7\20\1\130\24\20\2\0\3\20\2\0\7\20\1\131"+
    "\24\20\2\0\3\20\2\0\6\20\1\132\25\20\2\0"+
    "\3\20\2\0\12\20\1\122\1\123\20\20\2\0\3\20"+
    "\2\0\5\20\1\133\26\20\2\0\3\20\2\0\27\20"+
    "\1\124\4\20\2\0\3\20\2\0\20\20\1\134\13\20"+
    "\2\0\3\20\2\0\6\20\1\124\23\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\1\1\11\3\1\1\11\12\1\1\11\3\1"+
    "\1\11\3\1\1\11\5\1\1\11\1\1\1\11\3\1"+
    "\1\11\16\1\2\0\1\1\2\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ROSMsgLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(END_TYPE); return ROSMsgTypes.TYPE;
            } 
            // fall through
          case 27: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 28: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 29: break;
          case 4: 
            { yybegin(YYINITIAL); return ROSMsgTypes.COMMENT;
            } 
            // fall through
          case 30: break;
          case 5: 
            { yybegin(START_NAME); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 31: break;
          case 6: 
            { yybegin(IN_ARRAY); return ROSMsgTypes.LBRACKET;
            } 
            // fall through
          case 32: break;
          case 7: 
            { yybegin(IN_ARRAY); return ROSMsgTypes.NUMBER;
            } 
            // fall through
          case 33: break;
          case 8: 
            { yybegin(END_ARRAY); return ROSMsgTypes.RBRACKET;
            } 
            // fall through
          case 34: break;
          case 9: 
            { yybegin(END_NAME); return ROSMsgTypes.NAME;
            } 
            // fall through
          case 35: break;
          case 10: 
            { yybegin(END_NAME); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 36: break;
          case 11: 
            { yybegin(START_CONST); return ROSMsgTypes.CONST_ASSIGNER;
            } 
            // fall through
          case 37: break;
          case 12: 
            { yybegin(END_LINE); return ROSMsgTypes.STRING;
            } 
            // fall through
          case 38: break;
          case 13: 
            { yybegin(START_CONST); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 39: break;
          case 14: 
            { yybegin(START_INT_NAME); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 15: 
            { yybegin(IN_INT_ARRAY); return ROSMsgTypes.LBRACKET;
            } 
            // fall through
          case 41: break;
          case 16: 
            { yybegin(IN_INT_ARRAY); return ROSMsgTypes.NUMBER;
            } 
            // fall through
          case 42: break;
          case 17: 
            { yybegin(END_INT_ARRAY); return ROSMsgTypes.RBRACKET;
            } 
            // fall through
          case 43: break;
          case 18: 
            { yybegin(END_INT_NAME); return ROSMsgTypes.NAME;
            } 
            // fall through
          case 44: break;
          case 19: 
            { yybegin(END_INT_NAME); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 45: break;
          case 20: 
            { yybegin(START_INT_CONST); return ROSMsgTypes.CONST_ASSIGNER;
            } 
            // fall through
          case 46: break;
          case 21: 
            { yybegin(START_INT_CONST); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 47: break;
          case 22: 
            { yybegin(END_LINE); return ROSMsgTypes.NUMBER;
            } 
            // fall through
          case 48: break;
          case 23: 
            { yybegin(NEG_NUM); return ROSMsgTypes.NEG_OPERATOR;
            } 
            // fall through
          case 49: break;
          case 24: 
            { yybegin(END_LINE); return ROSMsgTypes.SERVICE_SEPARATOR;
            } 
            // fall through
          case 50: break;
          case 25: 
            { yybegin(END_INT_TYPE); return ROSMsgTypes.KEYTYPE;
            } 
            // fall through
          case 51: break;
          case 26: 
            { yybegin(END_TYPE); return ROSMsgTypes.KEYTYPE;
            } 
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
